The ``print_square`` module
======================

Using ``print_square``
-------------------

This is an example text file in reStructuredText format.

    >>> print_square = __import__('4-print_square').print_square

Test cases:

    >>> len(print_square.__doc__) > 0
    True

    >>> len(__import__('4-print_square').__doc__) > 0
    True

    >>> print_square(1)
    #

    >>> print_square(2)
    ##
    ##

    >>> print_square(3)
    ###
    ###
    ###

    >>> print_square(-1)
    Traceback (most recent call last):
        ...
    ValueError: size must be >= 0

    >>> print_square(-2)
    Traceback (most recent call last):
        ...
    ValueError: size must be >= 0

    >>> print_square(1.5)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(-1.5)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(00001)
    Traceback (most recent call last):
        ...
    SyntaxError: invalid token

    >>> print_square(-0000001)
    Traceback (most recent call last):
        ...
    SyntaxError: invalid token

    >>> print_square()
    Traceback (most recent call last):
        ...
    TypeError: print_square() missing 1 required positional argument: 'size'

    >>> print_square(0)

    >>> print_square(+0)

    >>> print_square(-0)

    >>> print_square(())
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(None)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square((1))
    #
    
    >>> print_square(10e1000)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(-10e1000)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(10e-1000)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(-10e-1000)
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(float('nan'))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(float('inf'))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(float('-inf'))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square(-)
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

    >>> print_square(+)
    Traceback (most recent call last):
        ...
    SyntaxError: invalid syntax

    >>> print_square('1')
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square("1")
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square([])
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square({'a': 1})
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square([1])
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square((1,))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square({'a':1})
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square([1, 2])
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer

    >>> print_square((1, 2))
    Traceback (most recent call last):
        ...
    TypeError: size must be an integer



